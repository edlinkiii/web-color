export class SmallState{static #a;#b={};#c={};#d=[];#e={};#f=t=>this.#b.hasOwnProperty(t);#g=t=>this.#d.includes(t);constructor(){if(SmallState.#a)return SmallState.#a;this.E_A="Specified state property already exists.",this.E_E="Specified state property does not exist.",this.E_L="Specified state property is not alterable.",this.T_S="string",SmallState.#a=this}add(t,s=null,i=!1){let e=this.#f(t);if(e)throw Error(this.E_A);return this.#c[t]=s,this.#b[t]=void 0,this.#e[t]=[],this.reset(t),i&&this.#d.push(t),this}get(t){if(!this.#f(t))throw Error(this.E_E);return this.#b[t]}set(t,s){if(!this.#f(t))throw Error(this.E_E);if(this.#g(t))throw Error(this.E_L);return this.#b[t]=s,this.emit(t),s}reset(t){if(!this.#f(t))throw Error(this.E_E);if(this.#g(t))throw Error(this.E_L);return this.set(t,this.#c[t])}remove(t){if(!this.#f(t))throw Error(this.E_E);if(this.#g(t))throw Error(this.E_L);return delete this.#b[t],delete this.#c[t],delete this.#e[t],this}subscribe(t,s){let i=typeof t===this.T_S;if(i&&!this.#f(t))throw Error(this.E_E);let e=this.#e[t];Array.isArray(t)?t.forEach(t=>this.subscribe(t,s)):e.push(s)}unsubscribe(t,s=null){let i=this.#e[t];Array.isArray(t)?t.forEach(t=>this.unsubscribe(t,s)):i=null===s?[]:i.filter(t=>t!==s)}emit(t){let s=this.#e[t];if(!s?.length)return;let i=this.get(t);s.forEach(t=>t(i))}}